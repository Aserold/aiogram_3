from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_queries import orm_get_products
from filters.chat_types import ChatTypeFilter
from keyboards.reply import create_kb_reply

user_private_rt = Router()
user_private_rt.message.filter(ChatTypeFilter(['private']))


@user_private_rt.message((F.text.lower() == '–≤ –Ω–∞—á–∞–ª–æ') | (F.text.lower().contains('–ø—Ä–∏–≤–µ')))
@user_private_rt.message(CommandStart())
async def start_task(message: types.Message):
    name = message.from_user.first_name
    await message.answer(f'–ù—É –ø—Ä–∏–≤–µ—Ç, {name}!üòà\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!', reply_markup=create_kb_reply(
        '–ú–µ–Ω—é',
        '–û–ø–ª–∞—Ç–∞',
        '–î–æ—Å—Ç–∞–≤–∫–∞',
        '–°–≤–µ–¥–µ–Ω–∏—è',
        '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        sizes=(2, 2, 1)
    )
                         )


@user_private_rt.message(F.text == '–ú–µ–Ω—é')
@user_private_rt.message(Command('menu'))
async def menu(message: types.Message, session: AsyncSession):
    for product in await orm_get_products(session):
        await message.answer_photo(
            product.image,
            caption=f'<strong>{product.name}</strong>\
                    \n{product.description}\n–¶–µ–Ω–∞: {round(product.price, 2)} —Ä—É–±.',
        )
    await message.answer('–í–æ—Ç –º–µ–Ω—é:')


@user_private_rt.message(F.text.lower().contains('—Å–≤–µ–¥–µ–Ω–∏—è'))
@user_private_rt.message(Command('about'))
async def about(message: types.Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫–∞–∂–µ—Ç –¥–ª—è —Ç–µ–±—è –ø–∏—Ü—Ü—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ä–æ—à–æ –ø–æ–ø—Ä–æ—Å–∏—à—åüòÅ')


@user_private_rt.message(F.text.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
@user_private_rt.message(Command('support'))
async def about(message: types.Message):
    await message.answer('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', reply_markup=create_kb_reply(
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏',
        '–í –Ω–∞—á–∞–ª–æ',
        request_contact=0,
        sizes=(1, 1)
    ))


@user_private_rt.message(F.text.lower() == '–æ–ø–ª–∞—Ç–∞')
@user_private_rt.message(Command('payment'))
async def about(message: types.Message):
    await message.answer('–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:')


@user_private_rt.message(F.text.lower() == '–¥–æ—Å—Ç–∞–≤–∫–∞')
@user_private_rt.message(Command('shipping'))
async def about(message: types.Message):
    await message.answer('–õ–æ–∫–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=create_kb_reply(
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é',
        '–í –Ω–∞—á–∞–ª–æ',
        request_location=0,
        sizes=(1, 1)
    ))


@user_private_rt.message(F.location)
async def get_lo(message: types.Message):
    await message.answer('–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è –≤ –Ω–∞—à–∏—Ö –≤–ª–∞–¥–µ–Ω–∏—è—Ö')
    await message.answer(str(message.location))


@user_private_rt.message(F.contact)
async def get_lo(message: types.Message):
    await message.answer('–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—à–∏—Ö –≤–ª–∞–¥–µ–Ω–∏—è—Ö')
    await message.answer(str(message.contact))


# @user_private_rt.message((F.text | ~(F.text != '/admin')) & types.Message.from_user.id)
@user_private_rt.message((F.text | ~(F.text != '/admin')))
async def base_answer(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start')
