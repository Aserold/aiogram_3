from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command

from filters.chat_types import ChatTypeFilter
from keyboards.reply import start_kb3, del_kb, test_kb

user_private_rt = Router()
user_private_rt.message.filter(ChatTypeFilter(['private']))


@user_private_rt.message((F.text.lower().contains('–∑–¥—Ä–∞–≤')) | (F.text.lower().contains('–ø—Ä–∏–≤–µ')))
@user_private_rt.message(CommandStart())
async def start_task(message: types.Message):
    name = message.from_user.first_name
    await message.answer(f'–ù—É –ø—Ä–∏–≤–µ—Ç, {name}!üòà', reply_markup=start_kb3.as_markup(
        resize_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É')
    )


@user_private_rt.message(F.text.lower() == '–º–µ–Ω—é')
@user_private_rt.message(Command('menu'))
async def menu(message: types.Message):
    await message.answer('–í–æ—Ç –º–µ–Ω—é:', reply_markup=del_kb)


@user_private_rt.message(F.text.lower().contains('–±–æ—Ç'))
@user_private_rt.message(Command('about'))
async def about(message: types.Message):
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:', reply_markup=test_kb)


@user_private_rt.message(F.text.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞')
@user_private_rt.message(Command('support'))
async def about(message: types.Message):
    await message.answer('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')


@user_private_rt.message(F.text.lower() == '–æ–ø–ª–∞—Ç–∞')
@user_private_rt.message(Command('payment'))
async def about(message: types.Message):
    await message.answer('–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:')


@user_private_rt.message(F.text.lower() == '–¥–æ—Å—Ç–∞–≤–∫–∞')
@user_private_rt.message(Command('shipping'))
async def about(message: types.Message):
    await message.answer('–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:')


@user_private_rt.message(F.location)
async def get_lo(message: types.Message):
    await message.answer('–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è –≤ –Ω–∞—à–∏—Ö –≤–ª–∞–¥–µ–Ω–∏—è—Ö')
    await message.answer(str(message.location))


@user_private_rt.message(F.contact)
async def get_lo(message: types.Message):
    await message.answer('–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–∞—à–∏—Ö –≤–ª–∞–¥–µ–Ω–∏—è—Ö')
    await message.answer(str(message.contact))
